{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortTypes","goodsFromServer","sortButtons","name","type","SORT_FIELD_ALPHABETICALLY","style","SORT_FIELD_BY_LENGTH","SORT_REVERSE","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","sort","a","b","localeCompare","length","reverse","getPreparedGoods","className","map","cn","onClick","handleSort","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,2CAAAA,E,8BAAAA,E,wBAAAA,M,KAYL,IAAME,EAA6B,CACjC,CACEC,KAAM,sBACNC,KAAMJ,EAAUK,0BAChBC,MAAO,WAET,CACEH,KAAM,iBACNC,KAAMJ,EAAUO,qBAChBD,MAAO,cAET,CACEH,KAAM,UACNC,KAAMJ,EAAUQ,aAChBF,MAAO,eA0BJ,IAAMG,EAAgB,WAC3B,MACIC,mBAAwD,IAD5D,mBAAOC,EAAP,KAAkBC,EAAlB,KAEA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EA3BR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAa,YAAOD,GAc1B,OAZIL,IAAcX,EAAUK,2BAC1BY,EAAcC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAG3CT,IAAcX,EAAUO,sBAC1BU,EAAcC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEG,OAASF,EAAEE,UAGxCT,GACFI,EAAcM,UAGTN,EAQcO,CACnBvB,EAAiBU,EAAWE,GAgB9B,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACGvB,EAAYwB,KAAI,gBAAGvB,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAME,EAAf,EAAeA,MAAf,OACf,wBAEEF,KAAK,SACLqB,UAAWE,IAAG,SAAUrB,EAAO,CAC7B,WAAYF,IAASJ,EAAUQ,cAC1BK,EACDT,IAASO,IAEfiB,QAAS,kBAzBA,SAACxB,GACdA,IAASJ,EAAUQ,aACrBM,GAAeD,GAEfD,EAAaR,GAqBQyB,CAAWzB,IAR5B,SAUGD,GATIC,OAaPO,GAAaE,IACb,wBACET,KAAK,SACLqB,UAAU,4BACVG,QA3BU,WAClBhB,EAAa,IACbE,GAAc,IAsBR,sBAWJ,6BACGC,EAAaW,KAAI,SAAAI,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YCzHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1ce0c8ec.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortTypes {\n  SORT_FIELD_ALPHABETICALLY = 'alphabetically',\n  SORT_FIELD_BY_LENGTH = 'length',\n  SORT_REVERSE = 'reverse',\n}\n\ninterface ISortButton {\n  name: string;\n  type: SortTypes;\n  style: string;\n}\n\nconst sortButtons: ISortButton[] = [\n  {\n    name: 'Sort alphabetically',\n    type: SortTypes.SORT_FIELD_ALPHABETICALLY,\n    style: 'is-info',\n  },\n  {\n    name: 'Sort by length',\n    type: SortTypes.SORT_FIELD_BY_LENGTH,\n    style: 'is-success',\n  },\n  {\n    name: 'Reverse',\n    type: SortTypes.SORT_REVERSE,\n    style: 'is-warning',\n  },\n];\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: typeof SortTypes[keyof typeof SortTypes] | '',\n  isReversed: boolean,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField === SortTypes.SORT_FIELD_ALPHABETICALLY) {\n    preparedGoods.sort((a, b) => a.localeCompare(b));\n  }\n\n  if (sortField === SortTypes.SORT_FIELD_BY_LENGTH) {\n    preparedGoods.sort((a, b) => a.length - b.length);\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField]\n    = useState<typeof SortTypes[keyof typeof SortTypes] | ''>('');\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer, sortField, isReversed,\n  );\n\n  const handleSort = (type: typeof SortTypes[keyof typeof SortTypes]) => {\n    if (type === SortTypes.SORT_REVERSE) {\n      setIsReversed(!isReversed);\n    } else {\n      setSortField(type);\n    }\n  };\n\n  const handleReset = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        {sortButtons.map(({ name, type, style }) => (\n          <button\n            key={type}\n            type=\"button\"\n            className={cn('button', style, {\n              'is-light': type === SortTypes.SORT_REVERSE\n                ? !isReversed\n                : type !== sortField,\n            })}\n            onClick={() => handleSort(type)}\n          >\n            {name}\n          </button>\n        ))}\n\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}